//-----------------------------------------------------------------------------
// eo
// (c) GeNeura Team 1998 - 2000
/* 
    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

    Contact: todos@geneura.ugr.es, http://geneura.ugr.es
 */
//-----------------------------------------------------------------------------

#ifdef _MSC_VER
// to avoid long name warnings
#pragma warning(disable:4786)
#endif

#ifndef _eo_
#define _eo_

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif

// general purpose
#include <utils/Data.h>
#include <Object.h>
#include <Printable.h>
#include <Persistent.h>
#include <ScalarFitness.h>
#include <DualFitness.h>
#include <EO.h>

#include <utils/rnd_generators.h>
#include <Functor.h>
#include <apply.h>

// eo's
#include <Vector.h>

#include <other/String.h>

#include <utils/RndGenerators.h>
#include <Init.h>
#include <utils/UniformInit.h>

// the variation operators
#include <Op.h>
#include <GenOp.h>
#include <CloneOps.h>
#include <OpContainer.h>
// combinations of simple eoOps (eoMonOp and eoQuadOp)
#include <ProportionalCombinedOp.h>
// didactic (mimics SGA-like variation into an eoGenOp)
// calls crossover and mutation sequentially,
// with their respective mutation rates
#include <SGAGenOp.h>
// its dual: crossover, mutation (and copy) - proportional choice
// w.r.t. given relative weights
#include <PropGAGenOp.h>

// population
#include <Pop.h>

// Evaluation functions (all include eoEvalFunc.h)
#include <PopEvalFunc.h>
#include <EvalFuncPtr.h>
#include <EvalCounterThrowException.h>
#include <EvalTimeThrowException.h>
#include <EvalUserTimeThrowException.h>

// Continuators - all include eoContinue.h
#include <CombinedContinue.h>
#include <GenContinue.h>
#include <SteadyFitContinue.h>
#include <EvalContinue.h>
#include <FitContinue.h>
#include <PeriodicContinue.h>
#include <TimeContinue.h> // added th T.Legrand
#ifndef _MSC_VER
#include <CtrlCContinue.h>  // CtrlC handling (using 2 global variables!)
#endif
// Selection
// the eoSelectOne's
#include <RandomSelect.h>
#include <SequentialSelect.h>
#include <DetTournamentSelect.h>
#include <ProportionalSelect.h>
#include <FitnessScalingSelect.h> // also contains eoLinearFitScaling.h
#include <RankingSelect.h>
#include <StochTournamentSelect.h>
#include <SharingSelect.h>
// Embedding truncation selection
#include <TruncatedSelectOne.h>

// the batch selection - from an eoSelectOne
#include <SelectPerc.h>
#include <SelectNumber.h>
#include <SelectMany.h>
#include <TruncatedSelectMany.h>

// other batch selections
// DetSelect can also be obtained as eoSequentialSelect, an eoSelectOne
// (using setup and an index)
#include <DetSelect.h>

// Breeders
#include <GeneralBreeder.h>	// applies one eoGenOp, stop on offspring count
// #include <OneToOneBreeder.h>	// parent + SINGLE offspring compete (e.g. DE) - not ready yet...

// Replacement
// #include <Replacement.h>
#include <MergeReduce.h>
#include <ReduceMerge.h>
#include <SurviveAndDie.h>

// a simple transformer
#include <SGATransform.h>

// Perf2Worth stuff - includes eoSelectFromWorth.h
#include <NDSorting.h>


// Algorithms
#include <EasyEA.h>
#include <SGA.h>
// #include <EvolutionStrategy.h>   removed for a while - until eoGenOp is done

// Utils
#include <utils/checkpointing>
#include <utils/RealVectorBounds.h> // includes eoRealBounds.h
#include <utils/IntBounds.h>        // no eoIntVectorBounds

// aliens
#include <other/external_eo>
#include <Counter.h>


//-----------------------------------------------------------------------------
// to be continued ...
//-----------------------------------------------------------------------------

/*** Particle Swarm Optimization stuff ***/

// basic particle definitions
#include <PO.h>
#include <VectorParticle.h>
#include <BitParticle.h>
#include <RealParticle.h>

// initialization
#include <ParticleBestInit.h>
#include <Initializer.h>

// velocities
#include <Velocity.h>
#include <StandardVelocity.h>
#include <ExtendedVelocity.h>
#include <IntegerVelocity.h>
#include <ConstrictedVelocity.h>
#include <FixedInertiaWeightedVelocity.h>
#include <VariableInertiaWeightedVelocity.h>
#include <ConstrictedVariableWeightVelocity.h>

// flights
#include <Flight.h>
#include <StandardFlight.h>
#include <VelocityInit.h>
#include <BinaryFlight.h>
#include <SigBinaryFlight.h>

// topologies
#include <Topology.h>
#include <StarTopology.h>
#include <LinearTopology.h>
#include <RingTopology.h>
#include <Neighborhood.h>
#include <SocialNeighborhood.h>

// PS algorithms
#include <PSO.h>
#include <EasyPSO.h>
#include <SyncEasyPSO.h>

// utils
#include <RealBoundModifier.h>
#include <RandomRealWeightUp.h>
#include <WeightUpdater.h>
#include <LinearDecreasingWeightUp.h>
#include <GaussRealWeightUp.h>

#include <utils/ParserLogger.h>

//-----------------------------------------------------------------------------

#endif

// Local Variables:
// mode: C++
// End:
